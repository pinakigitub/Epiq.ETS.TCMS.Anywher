// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Epiq.ETS.TCMS.Anywhere.Testing.E2ETest.TestFramework
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("login")]
    [NUnit.Framework.CategoryAttribute("Regression")]
    [NUnit.Framework.CategoryAttribute("Smoke")]
    [NUnit.Framework.CategoryAttribute("ReactJS")]
    public partial class LoginFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Login.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "login", "\tIn order to access the system\r\n\tAs a user of Unity\r\n\tI want to be able to see th" +
                    "e login page and login to the system with my credentials: user, password and off" +
                    "ice", ProgrammingLanguage.CSharp, new string[] {
                        "Regression",
                        "Smoke",
                        "ReactJS"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Login button should not be active until all fields are data filled")]
        [NUnit.Framework.CategoryAttribute("login")]
        [NUnit.Framework.CategoryAttribute("US10882")]
        [NUnit.Framework.CategoryAttribute("TC11537")]
        [NUnit.Framework.TestCaseAttribute("Automation", "", "", "inactive", new string[0])]
        [NUnit.Framework.TestCaseAttribute("", "Automation@1", "", "inactive", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Automation", "Automation@1", "", "inactive", new string[0])]
        public virtual void LoginButtonShouldNotBeActiveUntilAllFieldsAreDataFilled(string username, string password, string office, string active_Inactive, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "login",
                    "US10882",
                    "TC11537"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Login button should not be active until all fields are data filled", @__tags);
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given("I enter to Unity Login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.When(string.Format("I fill in all fields with {0}, {1} and {2}", username, password, office), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Login button should become inactive if I fill all fields and then remove one")]
        [NUnit.Framework.CategoryAttribute("login")]
        [NUnit.Framework.CategoryAttribute("US10882")]
        [NUnit.Framework.CategoryAttribute("TC11537")]
        [NUnit.Framework.TestCaseAttribute("Automation", "Automation1!", "crose", "username", "inactive", new string[0])]
        public virtual void LoginButtonShouldBecomeInactiveIfIFillAllFieldsAndThenRemoveOne(string username, string password, string office, string field, string active_Inactive, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "login",
                    "US10882",
                    "TC11537"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Login button should become inactive if I fill all fields and then remove one", @__tags);
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("I enter to Unity Login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
 testRunner.When(string.Format("I fill in all fields with {0}, {1} and {2}", username, password, office), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.And(string.Format("I remove the value from {0}", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Failed login - Try to login with <username>, <password> and <office> and verify a" +
            "ccess is denied")]
        [NUnit.Framework.CategoryAttribute("Regression")]
        [NUnit.Framework.CategoryAttribute("Sanity")]
        [NUnit.Framework.CategoryAttribute("login")]
        [NUnit.Framework.CategoryAttribute("US10882")]
        [NUnit.Framework.CategoryAttribute("TC11538")]
        [NUnit.Framework.TestCaseAttribute("wronguser", "anything", "anything", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Automation", "wrongpassword", "crose", new string[0])]
        public virtual void FailedLogin_TryToLoginWithUsernamePasswordAndOfficeAndVerifyAccessIsDenied(string username, string password, string office, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Regression",
                    "Sanity",
                    "login",
                    "US10882",
                    "TC11538"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Failed login - Try to login with <username>, <password> and <office> and verify a" +
                    "ccess is denied", @__tags);
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("I enter to Unity Login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.When(string.Format("I try to login with credentials {0}, {1} and {2}", username, password, office), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then("Login Page displays an error message reading \'Login Failed. Either the username o" +
                    "r password was incorrect or the user doesn\'t have access to this office\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Login Page - Successful login")]
        [NUnit.Framework.CategoryAttribute("Regression")]
        [NUnit.Framework.CategoryAttribute("Sanity")]
        [NUnit.Framework.CategoryAttribute("login")]
        [NUnit.Framework.CategoryAttribute("US10882")]
        [NUnit.Framework.CategoryAttribute("TC11545")]
        [NUnit.Framework.CategoryAttribute("US10886")]
        [NUnit.Framework.CategoryAttribute("TC11573")]
        [NUnit.Framework.CategoryAttribute("US36895")]
        [NUnit.Framework.CategoryAttribute("TC41272")]
        [NUnit.Framework.CategoryAttribute("US78063")]
        [NUnit.Framework.CategoryAttribute("TC86537")]
        [NUnit.Framework.TestCaseAttribute("Automation", "Automation1!", "crose", new string[0])]
        public virtual void LoginPage_SuccessfulLogin(string username, string password, string office, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Regression",
                    "Sanity",
                    "login",
                    "US10882",
                    "TC11545",
                    "US10886",
                    "TC11573",
                    "US36895",
                    "TC41272",
                    "US78063",
                    "TC86537"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Login Page - Successful login", @__tags);
#line 62
this.ScenarioSetup(scenarioInfo);
#line 63
 testRunner.Given("I enter to Unity Login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 64
 testRunner.When(string.Format("I try to login with credentials {0}, {1} and {2}", username, password, office), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
 testRunner.Then("I see the Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Login with view permission - Successful login")]
        public virtual void LoginWithViewPermission_SuccessfulLogin()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Login with view permission - Successful login", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("I enter to Unity Login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
 testRunner.When("I try to login with view credentials \'AutomationView\', \'Welcome456Epiq!\' and \'cro" +
                    "se\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("I see the Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Login Page - Succesful login after 3 failed attempts")]
        [NUnit.Framework.CategoryAttribute("login")]
        [NUnit.Framework.CategoryAttribute("US10882")]
        [NUnit.Framework.CategoryAttribute("TC11549")]
        public virtual void LoginPage_SuccesfulLoginAfter3FailedAttempts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Login Page - Succesful login after 3 failed attempts", new string[] {
                        "login",
                        "US10882",
                        "TC11549"});
#line 79
this.ScenarioSetup(scenarioInfo);
#line 80
 testRunner.Given("I enter to Unity Login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 81
 testRunner.When("I try to login with credentials Automation, wrongpassword and conversion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
 testRunner.And("I try to login with credentials Automation, Automation1! and crose", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.Then("I see the Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Login Page - Succesful login after 3 failed attempts, followed by a failed attemp" +
            "t")]
        [NUnit.Framework.CategoryAttribute("login")]
        [NUnit.Framework.CategoryAttribute("US10882")]
        [NUnit.Framework.CategoryAttribute("TC11550")]
        public virtual void LoginPage_SuccesfulLoginAfter3FailedAttemptsFollowedByAFailedAttempt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Login Page - Succesful login after 3 failed attempts, followed by a failed attemp" +
                    "t", new string[] {
                        "login",
                        "US10882",
                        "TC11550"});
#line 89
this.ScenarioSetup(scenarioInfo);
#line 90
 testRunner.Given("I enter to Unity Login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 91
 testRunner.When("I try to login with credentials Automation, wrongpassword and crose", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
 testRunner.And("I try to login with credentials Automation, Automation1! and crose", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("I do Logout", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.And("I try to login with credentials Automation, wrongpassword and crose", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.Then("Login Page displays an error message reading \'Login Failed. Either the username o" +
                    "r password was incorrect or the user doesn\'t have access to this office\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Login Page - Successful Login after 4 failed login attempts with a valid username" +
            " but wrong office")]
        [NUnit.Framework.CategoryAttribute("login")]
        [NUnit.Framework.CategoryAttribute("US10882")]
        [NUnit.Framework.CategoryAttribute("TC11554")]
        public virtual void LoginPage_SuccessfulLoginAfter4FailedLoginAttemptsWithAValidUsernameButWrongOffice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Login Page - Successful Login after 4 failed login attempts with a valid username" +
                    " but wrong office", new string[] {
                        "login",
                        "US10882",
                        "TC11554"});
#line 101
this.ScenarioSetup(scenarioInfo);
#line 102
 testRunner.Given("I enter to Unity Login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 103
 testRunner.When("I try to login with credentials Automation, wrongpassword and wrongoffice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
 testRunner.And("I try to login with credentials Automation, Automation1! and crose", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
 testRunner.Then("I see the Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Login Page - Successful Login after 4 failed login attempts with the same user bu" +
            "t different office")]
        [NUnit.Framework.CategoryAttribute("login")]
        [NUnit.Framework.CategoryAttribute("US10882")]
        [NUnit.Framework.CategoryAttribute("TC11555")]
        public virtual void LoginPage_SuccessfulLoginAfter4FailedLoginAttemptsWithTheSameUserButDifferentOffice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Login Page - Successful Login after 4 failed login attempts with the same user bu" +
                    "t different office", new string[] {
                        "login",
                        "US10882",
                        "TC11555"});
#line 112
this.ScenarioSetup(scenarioInfo);
#line 113
 testRunner.Given("I enter to Unity Login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 114
 testRunner.When("I try to login with credentials Automation, wrongpassword and crose", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
 testRunner.And("I try to login with credentials Automation, wrongpassword and wrongoffice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
 testRunner.And("I try to login with credentials Automation, Automation1! and crose", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
 testRunner.Then("I see the Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Login Page - Successful Login after 4 failed login attempts with the same user bu" +
            "t different office (2)")]
        [NUnit.Framework.CategoryAttribute("login")]
        [NUnit.Framework.CategoryAttribute("US10882")]
        [NUnit.Framework.CategoryAttribute("TC11854")]
        public virtual void LoginPage_SuccessfulLoginAfter4FailedLoginAttemptsWithTheSameUserButDifferentOffice2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Login Page - Successful Login after 4 failed login attempts with the same user bu" +
                    "t different office (2)", new string[] {
                        "login",
                        "US10882",
                        "TC11854"});
#line 124
this.ScenarioSetup(scenarioInfo);
#line 125
 testRunner.Given("I enter to Unity Login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 126
 testRunner.When("I try to login with credentials Automation, wrongpassword and crose", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 131
 testRunner.And("I try to login with credentials Automation, Automation1! and crose", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
 testRunner.Then("I see the Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
